// Generated by CoffeeScript 1.6.2
(function() {
  var Section, SectionSchema, app, che, express, fs, http, io, mongo, path, port;

  express = require('express');

  http = require('http');

  fs = require('fs');

  mongo = require('mongoose');

  path = require('path');

  che = require('cheerio');

  port = 3000;

  app = express();

  app.set('port', process.env.PORT || port);

  app.use(express.favicon(__dirname + '/frontend/favicon.ico'));

  app.use(express["static"](__dirname + '/frontend'));

  app.use(express.bodyParser({
    uploadDir: 'uploads'
  }));

  app.use(express.methodOverride());

  mongo.connect('mongodb://localhost/iconmelon');

  SectionSchema = new mongo.Schema({
    name: String,
    author: String,
    license: String,
    creationDate: String,
    icons: Array,
    moderated: Boolean
  });

  Section = mongo.model('Section', SectionSchema);

  io = require('socket.io').listen(app.listen(process.env.PORT || port));

  io.sockets.on("connection", function(socket) {
    console.log('connected');
    socket.on("sections:read", function(data, callback) {
      return Section.find({
        moderated: true
      }, function(err, docs) {
        return callback(null, docs);
      });
    });
    return socket.on("section:create", function(data, callback) {
      console.log(typeof data);
      data.moderated = false;
      console.log(data);
      return new Section(data).save();
    });
  });

  app.post('/file-upload', function(req, res, next) {
    return fs.readFile(req.files.files[0].path, {
      encoding: 'utf8'
    }, function(err, data) {
      var $;

      $ = che.load(data);
      res.send($('svg').html());
      return fs.unlink(req.files.files[0].path, function(err) {
        return err && console.error(err);
      });
    });
  });

}).call(this);
