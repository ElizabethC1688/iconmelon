// Generated by CoffeeScript 1.6.2
(function() {
  define('helpers', ['md5'], function(md5) {
    var Helpers;

    Helpers = (function() {
      function Helpers() {}

      Helpers.prototype.getRandom = function(min, max) {
        return Math.floor((Math.random() * ((max + 1) - min)) + min);
      };

      Helpers.prototype.listenLinks = function() {
        return $(document.body).on('click', 'a', function(e) {
          var $it;

          e.preventDefault();
          $it = $(this);
          return App.router.navigate($it.attr('href'), {
            trigger: true
          });
        });
      };

      Helpers.prototype.normalizeBoolean = function(val) {
        return (val === 'false') !== (Boolean(val));
      };

      Helpers.prototype.unescape = function(str) {
        return str != null ? str.replace(/\&lt;/g, '<').replace(/\&gt;/g, '>').replace(/\&quot;/g, '"') : void 0;
      };

      Helpers.prototype.generateHash = function() {
        return md5((new Date) + (new Date).getMilliseconds() + Math.random(9999999999999) + Math.random(9999999999999) + Math.random(9999999999999));
      };

      Helpers.prototype.refreshSvg = function() {
        return App.$svgWrap.html(App.$svgWrap.html());
      };

      Helpers.prototype.upsetSvgShape = function(o) {
        var $shape, i, isLoaded;

        isLoaded = false;
        if (o.isCheck) {
          i = 0;
          while (i < App.loadedHashes.length) {
            if (String(App.loadedHashes[i]) === String(o.hash)) {
              isLoaded = true;
              i = App.loadedHashes.length;
            }
            i++;
          }
        }
        if (!isLoaded) {
          $shape = $('<g>').html(o.shape).attr('id', o.hash);
          $shape.find('*').each(function(i, child) {
            var $child;

            $child = $(child);
            if ($child.attr('fill') !== 'none') {
              return $child.removeAttr('fill');
            }
          });
          o.$shapes.append($shape);
          return App.loadedHashes.push(o.hash);
        }
      };

      Helpers.prototype.addToSvg = function($shapes) {
        App.$svgWrap.find('#svg-source').append($shapes.html());
        return this.refreshSvg();
      };

      return Helpers;

    })();
    return new Helpers;
  });

}).call(this);
