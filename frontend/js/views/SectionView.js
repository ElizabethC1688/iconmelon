// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/SectionView', ['views/ProtoView', 'models/SectionModel', 'collectionViews/IconsCollectionView', 'collections/IconsCollection', 'underscore'], function(ProtoView, SectionModel, IconsCollectionView, IconsCollection, _) {
    var SectionView, _ref;

    SectionView = (function(_super) {
      __extends(SectionView, _super);

      function SectionView() {
        _ref = SectionView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      SectionView.prototype.model = SectionModel;

      SectionView.prototype.template = '#section-view-template';

      SectionView.prototype.className = 'section-b cf';

      SectionView.prototype.events = {
        'click #js-hide': 'toggleHide',
        'click #js-select-all': 'selectAll',
        'click #js-deselect-all': 'deSelectAll'
      };

      SectionView.prototype.initialize = function() {
        this.bindModelEvents();
        SectionView.__super__.initialize.apply(this, arguments);
        return this;
      };

      SectionView.prototype.bindModelEvents = function() {
        return this.model.on('change', this.render);
      };

      SectionView.prototype.render = function() {
        var _this = this;

        SectionView.__super__.render.apply(this, arguments);
        _.defer(function() {
          return _this.renderIcons();
        });
        this.$el.toggleClass('is-closed', !!this.model.get('isClosed'));
        return this;
      };

      SectionView.prototype.renderIcons = function() {
        this.iconsCollectionView = new IconsCollectionView({
          $el: this.$('#js-icons-place'),
          isRender: true,
          collection: new IconsCollection(this.model.get('icons'))
        });
        return this.model.iconsCollectionView = this.iconsCollectionView;
      };

      SectionView.prototype.selectAll = function() {
        this.iconsCollectionView.collection.selectAll();
        return App.vent.trigger('icon:select');
      };

      SectionView.prototype.deSelectAll = function() {
        this.iconsCollectionView.collection.deSelectAll();
        return App.vent.trigger('icon:select');
      };

      SectionView.prototype.toggleHide = function() {
        console.log('toggle hide');
        return this.model.toggleAttr('isClosed');
      };

      return SectionView;

    })(ProtoView);
    return SectionView;
  });

}).call(this);
