// Generated by CoffeeScript 1.6.2
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('collections/PaginatedCollection', ['backbone'], function(B) {
    var PaginatedCollection, _ref;

    PaginatedCollection = (function(_super) {
      __extends(PaginatedCollection, _super);

      function PaginatedCollection() {
        _ref = PaginatedCollection.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      PaginatedCollection.prototype.page = 3;

      PaginatedCollection.prototype.perPage = 1;

      PaginatedCollection.prototype.initialize = function() {
        return this.options = {
          page: this.page,
          perPage: this.perPage,
          total: 10
        };
      };

      PaginatedCollection.prototype.fetch = function(options) {
        return Backbone.Collection.prototype.fetch.call(this, {
          data: $.extend(this.options, options || {})
        });
      };

      PaginatedCollection.prototype.parse = function(resp) {
        this.options.total = resp.total;
        return resp.models;
      };

      PaginatedCollection.prototype.pageInfo = function() {
        var info, max;

        info = {
          total: this.options.total,
          page: this.options.page,
          perPage: this.options.perPage,
          pages: Math.ceil(this.options.total / this.options.perPage),
          prev: false,
          next: false
        };
        max = Math.min(this.options.total, this.options.page * this.options.perPage);
        if (this.options.total === this.options.pages * this.options.perPage) {
          max = this.options.total;
        }
        info.range = [(this.options.page - 1) * this.options.perPage + 1, max];
        if (this.options.page > 1) {
          info.prev = this.options.page - 1;
        }
        if (this.options.page < info.pages) {
          info.next = this.options.page + 1;
        }
        return info;
      };

      PaginatedCollection.prototype.nextPage = function() {
        if (!this.pageInfo().next) {
          return false;
        }
        this.options.page++;
        return this.fetch();
      };

      PaginatedCollection.prototype.prevPage = function() {
        if (!this.pageInfo().prev) {
          return false;
        }
        this.options.page--;
        return this.fetch();
      };

      PaginatedCollection.prototype.loadPage = function(n) {
        if (n === this.options.page) {
          return false;
        }
        this.options.page = n;
        return this.fetch();
      };

      return PaginatedCollection;

    })(B.Collection);
    return PaginatedCollection;
  });

}).call(this);
